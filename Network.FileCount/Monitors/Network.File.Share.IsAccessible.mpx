  <ManagementPackFragment SchemaVersion="2.0" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
    <!--
%%
Description:
  A MONITOR which runs a timed PowerShell script as the DataSource and outputs a propertybag as GOOD or BAD to drive Monitor state and ALERT
  CompanyID - is a short abbreviation for your company with NO SPACES OR SPECIAL CHARACTERS ALLOWED
  AppName - is a short name for your app with NO SPACES OR SPECIAL CHARACTERS ALLOWED  
  ClassID - is the targeted class such as your custom class or Windows!Microsoft.Windows.Server.OperatingSystem
  UniqueID - Is a unique short description of the monitor purpose (NO SPACES OR SPECIAL CHARACTERS ALLOWED) such as "MonitorFilesInFolder"  
  
Version: 1.3
LastModified: 4-Nov-2017
%%

In this fragment you need to replace:
  ABCD
  FileCount
  FileCount.Share
  Accessible  


This fragment depends on references:
  RequiredReference: Alias="System", ID="System.Library"
  RequiredReference: Alias="Windows", ID="Microsoft.Windows.Library"
  RequiredReference: Alias="Health", ID="System.Health.Library"	
  
@@Author=Kevin Holman@@  
-->
    <TypeDefinitions>
      <ModuleTypes>
        <DataSourceModuleType ID="Network.FileCount.Accessible.Monitor.DataSource" Accessibility="Internal" Batching="false" RunAs="Network.FileCount.RunasProfile">
          <Configuration>
            <xsd:element minOccurs="1" type="xsd:integer" name="IntervalSeconds" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
            <xsd:element minOccurs="0" type="xsd:string" name="SyncTime" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
            <xsd:element minOccurs="1" type="xsd:integer" name="TimeoutSeconds" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
            <xsd:element minOccurs="1" type="xsd:string" name="Share" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          </Configuration>
          <OverrideableParameters>
            <OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" />
            <OverrideableParameter ID="SyncTime" Selector="$Config/SyncTime$" ParameterType="string" />
            <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
            <OverrideableParameter ID="Share" Selector="$Config/Share$" ParameterType="string" />
          </OverrideableParameters>
          <ModuleImplementation Isolation="Any">
            <Composite>
              <MemberModules>
                <DataSource ID="Scheduler" TypeID="System!System.Scheduler">
                  <Scheduler>
                    <SimpleReccuringSchedule>
                      <Interval Unit="Seconds">$Config/IntervalSeconds$</Interval>
                      <SyncTime>$Config/SyncTime$</SyncTime>
                    </SimpleReccuringSchedule>
                    <ExcludeDates />
                  </Scheduler>
                </DataSource>
                <ProbeAction ID="PA" TypeID="Windows!Microsoft.Windows.PowerShellPropertyBagTriggerOnlyProbe">
                  <ScriptName>FileCount.Accessible.Monitor.DataSource.ps1</ScriptName>
                  <ScriptBody>
                    param([string]$Share)
                    #=================================================================================
                    #  Describe Script Here
                    #
                    #  Author:
                    #  v1.0
                    #=================================================================================


                    # Constants section - modify stuff here:
                    #=================================================================================
                    # Assign script name variable for use in event logging.
                    $ScriptName = "Network.FileCount.Accessible.Monitor.DataSource.ps1"
                    $EventID = "3522"
                    #=================================================================================


                    # Starting Script section - All scripts get this
                    #=================================================================================
                    # Gather the start time of the script
                    $StartTime = Get-Date
                    #Set variable to be used in logging events
                    $whoami = whoami
                    # Load MOMScript API
                    $momapi = New-Object -comObject MOM.ScriptAPI
                    # Load PropertyBag function
                    $bag = $momapi.CreatePropertyBag()
                    #Log script event that we are starting task
                    $momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script is starting. `n Running as ($whoami).")
                    #=================================================================================


                    # Begin MAIN script section
                    #=================================================================================
                    #Set the condition = bad.  This represents your script finding something wrong
                    $strResult = "FileShareNotAccessible"

                    #Declare variables

                    [string]$sShare = $share

                    # Test to see if Share is Accessible
                    If(Test-Path -path "$sShare" -pathType Container -ErrorAction SilentlyContinue)
                    {
                    $momapi.LogScriptEvent($ScriptName,$EventID,0,"Share $sShare is accessible as user $whoami.")
                    $strResult = "FileShareAccessible"
                    $strMessage = "Share $sShare is accessible as user $whoami."
                    }
                    Else
                    {
                    $momapi.LogScriptEvent($ScriptName,$EventID,2,"Share $sShare is NOT accessible as user $whoami.")
                    $strResult = "FileShareNotAccessible"
                    $strMessage = "Share $sShare is NOT accessible as user $whoami."
                    }

                    # Return results
                    $bag.AddValue('Result',$strResult)
                    $bag.AddValue('Message',$strMessage)

                    # Return all bags
                    $bag


                    # End of script section
                    #=================================================================================
                    #Log an event for script ending and total execution time.
                    $EndTime = Get-Date
                    $ScriptTime = ($EndTime - $StartTime).TotalSeconds
                    $momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script Completed. `n Script Runtime: ($ScriptTime) seconds.")
                    #=================================================================================
                    # End of script
                  </ScriptBody>
                  <Parameters>
                    <Parameter>
                      <Name>Share</Name>
                      <Value>$Config/Share$</Value>
                    </Parameter>
                  </Parameters>
                  <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
                </ProbeAction>
              </MemberModules>
              <Composition>
                <Node ID="PA">
                  <Node ID="Scheduler" />
                </Node>
              </Composition>
            </Composite>
          </ModuleImplementation>
          <OutputType>System!System.PropertyBagData</OutputType>
        </DataSourceModuleType>
      </ModuleTypes>
      <MonitorTypes>
        <UnitMonitorType ID="Network.FileCount.Accessible.Monitor.MonitorType" Accessibility="Internal">
          <MonitorTypeStates>
            <MonitorTypeState ID="FileShareAccessible" NoDetection="false" />
            <MonitorTypeState ID="FileShareNotAccessible" NoDetection="false" />
          </MonitorTypeStates>
          <Configuration>
            <xsd:element minOccurs="1" type="xsd:integer" name="IntervalSeconds" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
            <xsd:element minOccurs="0" type="xsd:string" name="SyncTime" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
            <xsd:element minOccurs="1" type="xsd:integer" name="TimeoutSeconds" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
            <xsd:element minOccurs="1" type="xsd:string" name="Share" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          </Configuration>
          <OverrideableParameters>
            <OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" />
            <OverrideableParameter ID="SyncTime" Selector="$Config/SyncTime$" ParameterType="string" />
            <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
            <OverrideableParameter ID="Share" Selector="$Config/Share$" ParameterType="string" />
          </OverrideableParameters>
          <MonitorImplementation>
            <MemberModules>
              <DataSource ID="DS" TypeID="Network.FileCount.Accessible.Monitor.DataSource">
                <IntervalSeconds>$Config/IntervalSeconds$</IntervalSeconds>
                <SyncTime>$Config/SyncTime$</SyncTime>
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
                <Share>$Config/Share$</Share>
              </DataSource>
              <ConditionDetection ID="GoodConditionFilter" TypeID="System!System.ExpressionFilter">
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">Property[@Name='Result']</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="String">FileShareAccessible</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
              </ConditionDetection>
              <ConditionDetection ID="BadConditionFilter" TypeID="System!System.ExpressionFilter">
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">Property[@Name='Result']</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="String">FileShareNotAccessible</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
              </ConditionDetection>
            </MemberModules>
            <RegularDetections>
              <RegularDetection MonitorTypeStateID="FileShareAccessible">
                <Node ID="GoodConditionFilter">
                  <Node ID="DS" />
                </Node>
              </RegularDetection>
              <RegularDetection MonitorTypeStateID="FileShareNotAccessible">
                <Node ID="BadConditionFilter">
                  <Node ID="DS" />
                </Node>
              </RegularDetection>
            </RegularDetections>
            <OnDemandDetections>
              <OnDemandDetection MonitorTypeStateID="FileShareAccessible">
                <Node ID="GoodConditionFilter">
                  <Node ID="DS" />
                </Node>
              </OnDemandDetection>
              <OnDemandDetection MonitorTypeStateID="FileShareNotAccessible">
                <Node ID="BadConditionFilter">
                  <Node ID="DS" />
                </Node>
              </OnDemandDetection>
            </OnDemandDetections>
          </MonitorImplementation>
        </UnitMonitorType>
      </MonitorTypes>
    </TypeDefinitions>
    <Monitoring>
      <Monitors>
        <UnitMonitor ID="Network.FileCount.Accessible.Monitor" Accessibility="Public" Enabled="true" Target="Network.FileCount.Share" ParentMonitorID="Health!System.Health.AvailabilityState" Remotable="false" Priority="Normal" TypeID="Network.FileCount.Accessible.Monitor.MonitorType" ConfirmDelivery="true">
          <Category>AvailabilityHealth</Category>
          <AlertSettings AlertMessage="Network.FileCount.Accessible.Monitor.AlertMessage">
            <AlertOnState>Error</AlertOnState>
            <!-- Warning or Error should match OperationalStates below  -->
            <AutoResolve>true</AutoResolve>
            <AlertPriority>Normal</AlertPriority>
            <AlertSeverity>MatchMonitorHealth</AlertSeverity>
            <!-- Common options for AlertSeverity are MatchMonitorHealth, Information, Warning, Error -->
          </AlertSettings>
          <OperationalStates>
            <OperationalState ID="FileShareAccessible" MonitorTypeStateID="FileShareAccessible" HealthState="Success" />
            <OperationalState ID="FileShareNotAccessible" MonitorTypeStateID="FileShareNotAccessible" HealthState="Error" />
            <!-- HealthState = Warning or Error -->
          </OperationalStates>
          <Configuration>
            <IntervalSeconds>900</IntervalSeconds>
            <SyncTime></SyncTime>
            <TimeoutSeconds>300</TimeoutSeconds>
            <Share>$Target/Property[Type='Network.FileCount.Share']/Share$</Share>
          </Configuration>
        </UnitMonitor>
      </Monitors>
    </Monitoring>
    <Presentation>
      <StringResources>
        <StringResource ID="Network.FileCount.Accessible.Monitor.AlertMessage" />
      </StringResources>
    </Presentation>
    <LanguagePacks>
      <LanguagePack ID="ENU" IsDefault="true">
        <DisplayStrings>
          <DisplayString ElementID="Network.FileCount.Accessible.Monitor">
            <Name>File Share Accessible Monitor</Name>
            <Description>Used to monitor the accessibility of a file share</Description>
          </DisplayString>
          <DisplayString ElementID="Network.FileCount.Accessible.Monitor" SubElementID="FileShareAccessible">
            <Name>File share accessible</Name>
          </DisplayString>
          <DisplayString ElementID="Network.FileCount.Accessible.Monitor" SubElementID="FileShareNotAccessible">
            <Name>File share not accessible</Name>
          </DisplayString>         
          <DisplayString ElementID="Network.FileCount.Accessible.Monitor.AlertMessage">
            <Name>File Share Accessible Monitor: Failure</Name>
            <Description>File Share Accessible Monitor: Unable to access the network file share.  Check that the share is available and that the RunAs account is configured correctly.</Description>
          </DisplayString>
        </DisplayStrings>
        <KnowledgeArticles>
          <KnowledgeArticle ElementID="Network.FileCount.Accessible.Monitor.MonitorType" Visible="true">
            <MamlContent>
              <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
                <maml:title>Summary</maml:title>
                <maml:para>This monitor checks to see if a UNC path defined on the watcher node is accessible.</maml:para>
              </maml:section>
              <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
                <maml:title>Error Conditions</maml:title>
                <maml:para>If this monitor fails, check to be sure that the UNC path still exists and that the RunAs account is defined and has permissions to the share.</maml:para>
              </maml:section>              
            </MamlContent>
          </KnowledgeArticle>
        </KnowledgeArticles>        
      </LanguagePack>
    </LanguagePacks>
  </ManagementPackFragment>

