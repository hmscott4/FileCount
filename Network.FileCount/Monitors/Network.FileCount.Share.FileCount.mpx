<ManagementPackFragment SchemaVersion="2.0" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <TypeDefinitions>

      <ModuleTypes>
        <DataSourceModuleType ID="Network.FileCount.DataSource" Accessibility="Public" Batching="false" RunAs="Network.FileCount.RunasProfile">
          <Configuration>
            <xsd:element minOccurs="1" name="IntervalSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
            <xsd:element minOccurs="0" name="SyncTime" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
            <xsd:element minOccurs="1" name="Share" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
            <xsd:element minOccurs="1" name="Extension" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
            <xsd:element minOccurs="1" name="Count" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
            <xsd:element minOccurs="1" name="Age" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
            <xsd:element minOccurs="1" name="Recurse" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
            <xsd:element minOccurs="1" name="LoggingLevel" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          </Configuration>
          <OverrideableParameters>
            <OverrideableParameter ID="Interval" Selector="$Config/IntervalSeconds$" ParameterType="int" />
            <OverrideableParameter ID="SyncTime" Selector="$Config/SyncTime$" ParameterType="string" />
            <OverrideableParameter ID="Share" Selector="$Config/Share$" ParameterType="string" />
            <OverrideableParameter ID="Extension" Selector="$Config/Extension$" ParameterType="string" />
            <OverrideableParameter ID="Count" Selector="$Config/Count$" ParameterType="int" />
            <OverrideableParameter ID="Age" Selector="$Config/Age$" ParameterType="int" />
            <OverrideableParameter ID="Recurse" Selector="$Config/Recurse$" ParameterType="int" />
            <OverrideableParameter ID="LoggingLevel" Selector="$Config/Recurse$" ParameterType="int" />
          </OverrideableParameters>
          <ModuleImplementation Isolation="Any">
            <Composite>
              <MemberModules>
                <DataSource ID="Schedule" TypeID="System!System.SimpleScheduler">
                  <IntervalSeconds>$Config/IntervalSeconds$</IntervalSeconds>
                  <SyncTime>$Config/SyncTime$</SyncTime>
                </DataSource>
                <ProbeAction ID="Probe" TypeID="Network.FileCount.DataSource.PSScript" />
              </MemberModules>
              <Composition>
                <Node ID="Probe">
                  <Node ID="Schedule" />
                </Node>
              </Composition>
            </Composite>
          </ModuleImplementation>
          <OutputType>System!System.PropertyBagData</OutputType>
        </DataSourceModuleType>
        <ProbeActionModuleType ID="Network.FileCount.DataSource.PSScript" Accessibility="Public" Batching="false" PassThrough="false" RunAs="Network.FileCount.RunasProfile">
          <Configuration>
            <xsd:element minOccurs="0" name="Share" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
            <xsd:element minOccurs="0" name="Extension" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
            <xsd:element minOccurs="0" name="Count" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
            <xsd:element minOccurs="0" name="Age" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
            <xsd:element minOccurs="0" name="Recurse" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
            <xsd:element minOccurs="0" name="LoggingLevel" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          </Configuration>
          <ModuleImplementation Isolation="Any">
            <Composite>
              <MemberModules>
                <ProbeAction ID="PSScript" TypeID="Windows!Microsoft.Windows.PowerShellPropertyBagTriggerOnlyProbe">
                  <ScriptName>GetFileCount.ps1</ScriptName>
                  <ScriptBody>
                    param([string]$Share, [string]$Extension, [int]$Count, [int]$Age, [int]$Recurse, [int]$LoggingLevel)

                    $ScriptName = "GetFileCount.ps1"
                    $EventID = 3521

                    # LoggingLevel
                    # ================================================================================
                    # 0 = None
                    # 1 = Errors/Warnings
                    # 2 = Verbose
                    # ================================================================================

                    # Starting Script section - All scripts get this
                    #=================================================================================
                    # Gather the start time of the script
                    $StartTime = Get-Date
                    #Set variable to be used in logging events
                    $whoami = whoami
                    # Load MOMScript API
                    $momapi = New-Object -comObject MOM.ScriptAPI
                    # Load PropertyBag function
                    $bag = $momapi.CreatePropertyBag()
                    #Log script event that we are starting task
                    If($LoggingLevel -ge 2) {
                    $momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script is starting. `n Running as ($whoami).")
                    }
                    #=================================================================================

                    #Declare variables containing extension to check and file age

                    if($Extension.length -gt 0)
                    {
                    [string]$sExtension = "*"+$Extension
                    }
                    else
                    {
                    [string]$sExtension = "*"
                    }

                    [int]$iAge = $Age
                    [string]$sShare = $Share
                    [int]$iCount = $Count
                    [int]$iRecurse = $Recurse

                    # Test to see if Share is Accessible
                    If(Test-Path -path "$sShare" -pathType Container -ErrorAction SilentlyContinue)
                    {
                    # Count all files with the specific extension and older then the given time
                    if ($iRecurse -eq 1)
                    {
                    # $fileCount = Get-ChildItem -Recurse "$sShare\$sExtension" | where{$_.LastWriteTime -le (Get-Date).AddMinutes($iAge)}|Measure-Object |%{$_.Count}
                    $allFiles = Get-ChildItem -Recurse "$sShare\$sExtension" | where{$_.LastWriteTime -le (Get-Date).AddMinutes(-$iAge)}
                    $fileCount = $allFiles.Count
                    If($fileCount -gt 0) {
                    $fileSize = ($files | Measure-Object -Sum Length).Sum / 1MB
                    $fileSize = [Math]::Round($fileSize, 2)
                    } Else {
                    $fileSize = 0
                    }

                    if ($fileCount -le $iCount)
                    {
                    $strStatus = 1
                    $strMessage="Number of Files ($fileCount) in $sShare is under threshold $iCount."
                    If($LoggingLevel -ge 2) {
                    $momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Found $fileCount file(s) with extension $sExtension in $sShare. `n Under threshold $iCount.")
                    }
                    }
                    else
                    {
                    $strMessage="Number of Files ($fileCount) in $sShare exceeds threshold $iCount."
                    If($LoggingLevel -ge 1){
                    $momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Found $fileCount file(s) with extension $sExtension in $sShare.`n Exceeds threshold $iCount.")
                    }
                    $strStatus = 0
                    }
                    }
                    else
                    {
                    # $fileCount  = Get-ChildItem "$sShare\$sExtension" | where{$_.LastWriteTime -le (Get-Date).AddMinutes($iAge)}|Measure-Object |%{$_.Count}
                    $allFiles = Get-ChildItem -Recurse "$sShare\$sExtension" | where{$_.LastWriteTime -le (Get-Date).AddMinutes(-$iAge)}
                    $fileCount = $allFiles.Count
                    If($fileCount -gt 0) {
                    $fileSize = ($files | Measure-Object -Sum Length).Sum / 1MB
                    $fileSize = [Math]::Round($fileSize, 2)
                    } Else {
                    $fileSize = 0
                    }
                    if ($fileCount -le $iCount)
                    {
                    $strMessage="Number of Files ($fileCount) in $sShare is under threshold $iCount."
                    If($LoggingLevel -ge 2) {
                    $momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Found $fileCount file(s) with extension $sExtension in $sShare. `n Under threshold $iCount.")
                    }
                    $strStatus = 1
                    }
                    else
                    {

                    $strMessage="Number of Files ($fileCount) in $sShare exceeds threshold $iCount."
                    If($LoggingLevel -ge 1) {
                    $momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Found $fileCount file(s) with extension $sExtension in $sShare.`n Exceeds threshold $iCount.")
                    }
                    $strStatus = 0
                    }
                    }
                    }

                    Else
                    {
                    # Unable to access File Share
                    $strMessage="Unable to access $sShare"
                    If($LoggingLevel -ge 1) {
                    $momapi.LogScriptEvent($ScriptName,$EventID,2,"`n Unable to access $sShare as $whoami.")
                    }
                    # $count = 0
                    $fileCount = 0
                    $fileSize = 0
                    $strStatus = 0
                    }

                    # End of script section
                    #=================================================================================
                    #Log an event for script ending and total execution time.
                    $EndTime = Get-Date
                    $ScriptTime = ($EndTime - $StartTime).TotalSeconds
                    If($LoggingLevel -ge 2) {
                    $momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script Completed. `n Script Runtime: ($ScriptTime) seconds.")
                    }


                    #add the values to the bag
                    $bag.AddValue('Message', $strMessage)
                    $bag.AddValue('Status', $strStatus)
                    $bag.AddValue('Files',$fileCount)
                    $bag.AddValue('SizeMB',$fileSize)
                    $bag
                  </ScriptBody>
                  <Parameters>
                    <Parameter>
                      <Name>Share</Name>
                      <Value>$Config/Share$</Value>
                    </Parameter>
                    <Parameter>
                      <Name>Extension</Name>
                      <Value>$Config/Extension$</Value>
                    </Parameter>
                    <Parameter>
                      <Name>Count</Name>
                      <Value>$Config/Count$</Value>
                    </Parameter>
                    <Parameter>
                      <Name>Age</Name>
                      <Value>$Config/Age$</Value>
                    </Parameter>
                    <Parameter>
                      <Name>Recurse</Name>
                      <Value>$Config/Recurse$</Value>
                    </Parameter>
                    <Parameter>
                      <Name>LoggingLevel</Name>
                      <Value>$Config/LoggingLevel$</Value>
                    </Parameter>
                  </Parameters>
                  <TimeoutSeconds>300</TimeoutSeconds>
                </ProbeAction>
              </MemberModules>
              <Composition>
                <Node ID="PSScript" />
              </Composition>
            </Composite>
          </ModuleImplementation>
          <OutputType>System!System.PropertyBagData</OutputType>
          <TriggerOnly>true</TriggerOnly>
        </ProbeActionModuleType>
    </ModuleTypes>
    <MonitorTypes>
      <UnitMonitorType ID="Network.FileCount.Status.MonitorType" Accessibility="Public">
        <MonitorTypeStates>
          <MonitorTypeState ID="FileCountStatusOK" NoDetection="false" />
          <MonitorTypeState ID="FileCountStatusNotOK" NoDetection="false" />
        </MonitorTypeStates>
        <Configuration>
          <xsd:element name="IntervalSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="SyncTime" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="Share" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="Extension" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="Count" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="Age" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="Recurse" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="LoggingLevel" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" />
          <OverrideableParameter ID="SyncTime" Selector="$Config/SyncTime$" ParameterType="string" />
          <OverrideableParameter ID="Share" Selector="$Config/Share$" ParameterType="string" />
          <OverrideableParameter ID="Extension" Selector="$Config/Extension$" ParameterType="string" />
          <OverrideableParameter ID="Count" Selector="$Config/Count$" ParameterType="int" />
          <OverrideableParameter ID="Age" Selector="$Config/Age$" ParameterType="int" />
          <OverrideableParameter ID="Recurse" Selector="$Config/Recurse$" ParameterType="int" />
          <OverrideableParameter ID="LoggingLevel" Selector="$Config/LoggingLevel$" ParameterType="int" />
        </OverrideableParameters>
        <MonitorImplementation>
          <MemberModules>
            <DataSource ID="DS" TypeID="Network.FileCount.DataSource">
              <IntervalSeconds>$Config/IntervalSeconds$</IntervalSeconds>
              <SyncTime>$Config/SyncTime$</SyncTime>
              <Share>$Config/Share$</Share>
              <Extension>$Config/Extension$</Extension>
              <Count>$Config/Count$</Count>
              <Age>$Config/Age$</Age>
              <Recurse>$Config/Recurse$</Recurse>
              <LoggingLevel>$Config/LoggingLevel$</LoggingLevel>
            </DataSource>
            <ConditionDetection ID="FilterFileCountStatusOK" TypeID="System!System.ExpressionFilter">
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="Integer">Property[@Name='Status']</XPathQuery>
                  </ValueExpression>
                  <Operator>Equal</Operator>
                  <ValueExpression>
                    <Value Type="Integer">1</Value>
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
            </ConditionDetection>
            <ConditionDetection ID="FilterFileCountStatusNotOK" TypeID="System!System.ExpressionFilter">
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="Integer">Property[@Name='Status']</XPathQuery>
                  </ValueExpression>
                  <Operator>Equal</Operator>
                  <ValueExpression>
                    <Value Type="Integer">0</Value>
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
            </ConditionDetection>
          </MemberModules>
          <RegularDetections>
            <RegularDetection MonitorTypeStateID="FileCountStatusOK">
              <Node ID="FilterFileCountStatusOK">
                <Node ID="DS" />
              </Node>
            </RegularDetection>
            <RegularDetection MonitorTypeStateID="FileCountStatusNotOK">
              <Node ID="FilterFileCountStatusNotOK">
                <Node ID="DS" />
              </Node>
            </RegularDetection>
          </RegularDetections>
        </MonitorImplementation>
      </UnitMonitorType>
    </MonitorTypes>
  </TypeDefinitions>
  <Monitoring>
    <Monitors>
      <UnitMonitor ID="Network.FileCount.File.Share.File.Count.Monitor" Accessibility="Public" Enabled="true" Target="Network.FileCount.Share" ParentMonitorID="Health!System.Health.AvailabilityState" Remotable="false" Priority="Normal" RunAs="Network.FileCount.RunasProfile" TypeID="Network.FileCount.Status.MonitorType" ConfirmDelivery="false">
        <Category>AvailabilityHealth</Category>
        <AlertSettings AlertMessage="Network.FileCount.File.Share.File.Count.Monitor.AlertMessage">
          <AlertOnState>Error</AlertOnState>
          <AutoResolve>true</AutoResolve>
          <AlertPriority>Normal</AlertPriority>
          <AlertSeverity>MatchMonitorHealth</AlertSeverity>
          <AlertParameters>
            <AlertParameter1>$Target/Property[Type='Network.FileCount.Share']/Share$</AlertParameter1>
            <AlertParameter2>$Data/Context/Property[@Name='Files']$</AlertParameter2>
            <AlertParameter3>$Target/Property[Type='Network.FileCount.Share']/Extension$</AlertParameter3>
          </AlertParameters>
        </AlertSettings>
        <OperationalStates>
          <OperationalState ID="FileCountStatusOK" MonitorTypeStateID="FileCountStatusOK" HealthState="Success" />
          <OperationalState ID="FileCountStatusNotOK" MonitorTypeStateID="FileCountStatusNotOK" HealthState="Error" />
        </OperationalStates>
        <Configuration>
          <IntervalSeconds>900</IntervalSeconds>
          <SyncTime></SyncTime>
          <Share>$Target/Property[Type='Network.FileCount.Share']/Share$</Share>
          <Extension>$Target/Property[Type='Network.FileCount.Share']/Extension$</Extension>
          <Count>$Target/Property[Type='Network.FileCount.Share']/Count$</Count>
          <Age>$Target/Property[Type='Network.FileCount.Share']/Age$</Age>
          <Recurse>$Target/Property[Type='Network.FileCount.Share']/Recurse$</Recurse>
          <LoggingLevel>0</LoggingLevel>
        </Configuration>
      </UnitMonitor>
    </Monitors>    
  </Monitoring>
</ManagementPackFragment>
