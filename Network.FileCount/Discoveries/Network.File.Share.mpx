<ManagementPackFragment SchemaVersion="2.0" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <Monitoring>
    <Discoveries>
      <Discovery ID="Network.FileCount.Share.Discovery" Target="Network.FileCount.WatcherNode" Enabled="true" ConfirmDelivery="false" Remotable="false" Priority="Normal">
        <Category>Discovery</Category>
        <DiscoveryTypes>
          <DiscoveryClass TypeID="Network.FileCount.Share" />
        </DiscoveryTypes>
        <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.TimedPowerShell.DiscoveryProvider">
          <IntervalSeconds>3600</IntervalSeconds>
          <SyncTime />
          <ScriptName>GetSharesFromCSV.ps1</ScriptName>
          <ScriptBody>
            param($sourceId,$managedEntityId,$computerName,$csv,$LoggingLevel)

            # LoggingLevel
            # ================================================================================
            # 0 = None
            # 1 = Errors/Warnings
            # 2 = Verbose
            # ================================================================================
            $EventID = 3520


            #Create Discovery Property Bag
            $api = new-object -comObject 'MOM.ScriptAPI'
            $discoveryData = $api.CreateDiscoveryData(0, $SourceId, $ManagedEntityId)
            If($LoggingLevel -ge 2) {
            $api.LogScriptEvent("GetSharesFromCSV.ps1", $EventID, 0, "Discovery Started")
            }

            # BEGIN MAIN SCRIPT
            # ===============================================================================
            # Read data from csv file specified in the registry
            $shares = Import-csv -path $csv


            # TODO: ADD LOGIC FOR WHAT TO DO IF SHARE VALUE IS MISSING
            # TODO: ADD AUTO-INCREMENTING COUNTER FOR ID VALUE
            #Loop through all listed shares and create appropriate SCOM objects
            foreach ($share in $shares)
            {
            #Create Class Instance
            $instance = $discoveryData.CreateClassInstance("$MPElement[Name='Network.FileCount.Share']$")

            #Fill up properties of class
            # $instance.AddProperty("$MPElement[Name='Network.FileCount.Share']/ID$", $share.ID)
            $instance.AddProperty("$MPElement[Name='Network.FileCount.Share']/Share$", $share.Share)
            if($share.Extension){$instance.AddProperty("$MPElement[Name='Network.FileCount.Share']/Extension$", $Share.extension)} else {instance.AddProperty("$MPElement[Name='Network.FileCount.Share']/Extension$", "*")}
            if($share.Count){$instance.AddProperty("$MPElement[Name='Network.FileCount.Share']/Count$", $share.Count)} else {$instance.AddProperty("$MPElement[Name='Network.FileCount.Share']/Count$", 0)}
            if($share.Age){$instance.AddProperty("$MPElement[Name='Network.FileCount.Share']/Age$", $share.Age)} else {$instance.AddProperty("$MPElement[Name='Network.FileCount.Share']/Age$", 0)}
            if($share.Recurse){$instance.AddProperty("$MPElement[Name='Network.FileCount.Share']/Recurse$", $Share.Recurse)} else {$instance.AddProperty("$MPElement[Name='Network.FileCount.Share']/Recurse$", 0)}
            if($share.WarnSizeMB){$instance.AddProperty("$MPElement[Name='Network.FileCount.Share']/WarnSizeMB$", $Share.WarnSizeMB)} else {$instance.AddProperty("$MPElement[Name='Network.FileCount.Share']/WarnSizeMB$", 0)}
            if($share.ErrorSizeMB){$instance.AddProperty("$MPElement[Name='Network.FileCount.Share']/ErrorSizeMB$", $Share.ErrorSizeMB)} else {$instance.AddProperty("$MPElement[Name='Network.FileCount.Share']/ErrorSizeMB$", 0)}

            #Add the displayname, path of the server and key property of the parent class. (always recurring)
            $instance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $share.Share)
            $instance.AddProperty("$MPElement[Name='Network.FileCount.WatcherNode']/CSV$", $csv)
            $instance.AddProperty("$MPElement[Name='Windows!Microsoft.Windows.Computer']/PrincipalName$", $computerName)
            #Add the instance to the discoverydate propertybag

            $discoveryData.AddInstance($instance)
            If($LoggingLevel -ge 2) {
            $api.LogScriptEvent("GetSharesFromCSV.ps1", $EventID, 0, "Added instance $share.Share")
            }

            }

            If($LoggingLevel -ge 2) {
            $api.LogScriptEvent("GetSharesFromCSV.ps1", $EventID, 0, "Discovery Ended")
            }

            $discoveryData


          </ScriptBody>
          <Parameters>
            <Parameter>
              <Name>sourceID</Name>
              <Value>$MPElement$</Value>
            </Parameter>
            <Parameter>
              <Name>managedEntityID</Name>
              <Value>$Target/Id$</Value>
            </Parameter>
            <Parameter>
              <Name>computerName</Name>
              <Value>$Target/Host/Property[Type='Windows!Microsoft.Windows.Computer']/PrincipalName$</Value>
            </Parameter>
            <Parameter>
              <Name>CSV</Name>
              <Value>$Target/Property[Type='Network.FileCount.WatcherNode']/CSV$</Value>
            </Parameter>
            <Parameter>
              <Name>LoggingLevel</Name>
              <Value>$Target/Property[Type='Network.FileCount.WatcherNode']/LoggingLevel$</Value>
            </Parameter>
          </Parameters>
          <TimeoutSeconds>300</TimeoutSeconds>
          <StrictErrorHandling>true</StrictErrorHandling>
        </DataSource>
      </Discovery>      
    </Discoveries>
  </Monitoring>
</ManagementPackFragment>
