<ManagementPackFragment SchemaVersion="2.0" xmlns:xsd="http://www.w3.org/2001/XMLSchema"><TypeDefinitions>
    <ModuleTypes>
      <WriteActionModuleType ID="Network.FileCount.Enable.WatcherNode.Task.WA" Accessibility="Internal" Batching="false">
        <Configuration>
          <xsd:element minOccurs="1" name="ConfigFileName" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" name="TimeoutSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="ConfigFileName" Selector="$Config/ConfigFileName$" ParameterType="string" />
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <WriteAction ID="PSWA" TypeID="Windows!Microsoft.Windows.PowerShellWriteAction">
                <ScriptName>Network.FileCount.Enable.WatcherNode.Task.WA.ps1</ScriptName>
                <ScriptBody>
                  #=================================================================================
                  #  Script to execute a task in PowerShell
                  #=================================================================================
                  param($ConfigFileName)
                  #=================================================================================
                  # Constants section - modify stuff here:
                  $registryKey = "HKLM:\Software\FileCount"
                  $registryAttribute = "CSV"
                  $registryValue = $configFileName

                  # Assign script name variable for use in event logging
                  $ScriptName = "Network.FileCount.Enable.WatcherNode.Task.WA.ps1"
                  #=================================================================================

                  # Gather script start time
                  $StartTime = Get-Date

                  # Gather who the script is running as
                  $whoami = whoami

                  #Load the MOMScript API and discovery propertybag
                  $momapi = New-Object -comObject "Mom.ScriptAPI"

                  #Log script event that we are starting task
                  $momapi.LogScriptEvent($ScriptName,3524,0, "Starting script task.  Running as ($whoami)")

                  # Begin Main Script
                  #=================================================================================
                  # Write-Host "PowerShell script executed"
                  # Write-Host "ConfigFileName: " $ConfigFileName
                  # Test the path to the registry key to see if it already exists
                  If(Test-Path $registryKey)
                  {
                  }
                  Else
                  {
                  New-Item -Path $registryKey -Force | Out-Null
                  New-ItemProperty -Path $registryKey -Name $registryAttribute -Value $registryValue -PropertyType String -Force | Out-Null
                  }

                  If(Test-Path $$configFileName)
                  {
                  }
                  Else
                  {
                  Add-Item -Path $ConfigFileName -Force -PassThru
                  Add-Content -Path $ConfigFileName -Value "Id, Share, Extension, Count, Time, Recurse" -Force  -PassThru
                  }
                  #=================================================================================

                  # Log an event for script ending and total execution time.
                  $EndTime = Get-Date
                  $ScriptTime = ($EndTime - $StartTime).TotalSeconds
                  $momapi.LogScriptEvent($ScriptName,3524,0,"`n Script has completed. `n Runtime was ($ScriptTime) seconds.")
                </ScriptBody>
                <Parameters>
                  <Parameter>
                    <Name>ConfigFileName</Name>
                    <Value>$Config/ConfigFileName$</Value>
                  </Parameter>
                </Parameters>
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
              </WriteAction>
            </MemberModules>
            <Composition>
              <Node ID="PSWA" />
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.BaseData</OutputType>
        <InputType>System!System.BaseData</InputType>
      </WriteActionModuleType>
    </ModuleTypes>
  </TypeDefinitions><Monitoring>
    <Tasks>
      <Task ID="Network.FileCount.Enable.WatcherNode.Task" Accessibility="Public" Enabled="true" Target="Windows!Microsoft.Windows.Server.OperatingSystem" Timeout="120" Remotable="true">
        <Category>Custom</Category>
        <WriteAction ID="PSWA" TypeID="Network.FileCount.Enable.WatcherNode.Task.WA">
          <ConfigFileName>ENTER FILE NAME HERE</ConfigFileName>
          <TimeoutSeconds>60</TimeoutSeconds>
        </WriteAction>
      </Task>
    </Tasks>
  </Monitoring><LanguagePacks>
    <LanguagePack ID="ENU" IsDefault="true">
      <DisplayStrings>
        <DisplayString ElementID="Network.FileCount.Enable.WatcherNode.Task">
          <Name>Enable WatcherNode Task</Name>
          <Description>Enable Watcher Node task</Description>
        </DisplayString>
      </DisplayStrings>
      <KnowledgeArticles></KnowledgeArticles>
    </LanguagePack>
  </LanguagePacks></ManagementPackFragment>
