<ManagementPackFragment SchemaVersion="2.0" xmlns:xsd="http://www.w3.org/2001/XMLSchema"><TypeDefinitions>
    <ModuleTypes>
      <DataSourceModuleType ID="Network.File.Share.WatcherNode.Accessible.Monitor.DataSource" Accessibility="Internal" Batching="false">
        <Configuration>
          <xsd:element minOccurs="1" type="xsd:integer" name="IntervalSeconds" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" type="xsd:string" name="SyncTime" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" type="xsd:integer" name="TimeoutSeconds" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" type="xsd:string" name="CSV" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" />
          <OverrideableParameter ID="SyncTime" Selector="$Config/SyncTime$" ParameterType="string" />
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
          <OverrideableParameter ID="CSV" Selector="$Config/CSV$" ParameterType="string" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <DataSource ID="Scheduler" TypeID="System!System.Scheduler">
                <Scheduler>
                  <SimpleReccuringSchedule>
                    <Interval Unit="Seconds">$Config/IntervalSeconds$</Interval>
                    <SyncTime>$Config/SyncTime$</SyncTime>
                  </SimpleReccuringSchedule>
                  <ExcludeDates />
                </Scheduler>
              </DataSource>
              <ProbeAction ID="PA" TypeID="Windows!Microsoft.Windows.PowerShellPropertyBagTriggerOnlyProbe">
                <ScriptName>Network.File.Share.WatcherNode.Accessible.Monitor.DataSource.ps1</ScriptName>
                <ScriptBody>
                    param($CSV)
                    #=================================================================================
                    #  Describe Script Here
                    #  Check that the configuration file is accessible and correctly configured.
                    #
                    #  Author: Hugh Scott
                    #  v1.0
                    #=================================================================================


                    # Constants section - modify stuff here:
                    #=================================================================================
                    # Assign script name variable for use in event logging.
                    $ScriptName = "Network.File.Share.WatcherNode.Accessible.Monitor.DataSource.ps1"
                    $EventID = "3523"
                    #=================================================================================


                    # Starting Script section - All scripts get this
                    #=================================================================================
                    # Gather the start time of the script
                    $StartTime = Get-Date
                    #Set variable to be used in logging events
                    $whoami = whoami
                    # Load MOMScript API
                    $momapi = New-Object -comObject MOM.ScriptAPI
                    # Load PropertyBag function
                    $bag = $momapi.CreatePropertyBag()
                    #Log script event that we are starting task
                    $momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script is starting. `n Checking for existence of $CSV. `n Running as ($whoami).")
                    #=================================================================================


                    # Begin MAIN script section
                    #=================================================================================

                    If(Test-Path -path "$CSV" -pathType Leaf -ErrorAction SilentlyContinue){
                    $momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Check failed. `n FileCount configuration file $CSV found as user $whoami.")
                    $strResult = "ConfigFileFound"
                    $strMessage = "Configuration file $CSV is accessible as user $whoami."
                    }
                    else
                    {
                    $momapi.LogScriptEvent($ScriptName,$EventID,2,"`n Check failed. `n FileCount configuration file $CSV NOT found as user $whoami.")
                    $strResult = "ConfigFileNotFound"
                    $strMessage = "Configuration file $CSV is NOT accessible as user $whoami."
                    }

                    # Return all bags
                    $bag.AddValue("Message",$strMessage)
                    $bag.AddValue("Result",$strResult)
                    $bag


                    # End of script section
                    #=================================================================================
                    #Log an event for script ending and total execution time.
                    $EndTime = Get-Date
                    $ScriptTime = ($EndTime - $StartTime).TotalSeconds
                    $momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script Completed. `n Script Runtime: ($ScriptTime) seconds.")
                    #=================================================================================
                    # End of script
                  </ScriptBody>
                <Parameters>
                  <Parameter>
                    <Name>CSV</Name>
                    <Value>$Config/CSV$</Value>
                  </Parameter>
                </Parameters>
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
              </ProbeAction>
            </MemberModules>
            <Composition>
              <Node ID="PA">
                <Node ID="Scheduler" />
              </Node>
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.PropertyBagData</OutputType>
      </DataSourceModuleType>
    </ModuleTypes>
    <MonitorTypes>
      <UnitMonitorType ID="Network.File.Share.WatcherNode.Accessible.Monitor.MonitorType" Accessibility="Internal">
        <MonitorTypeStates>
          <MonitorTypeState ID="ConfigFileFound" NoDetection="false" />
          <MonitorTypeState ID="ConfigFileNotFound" NoDetection="false" />
        </MonitorTypeStates>
        <Configuration>
          <xsd:element minOccurs="1" type="xsd:integer" name="IntervalSeconds" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" type="xsd:string" name="SyncTime" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" type="xsd:integer" name="TimeoutSeconds" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" type="xsd:string" name="CSV" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" />
          <OverrideableParameter ID="SyncTime" Selector="$Config/SyncTime$" ParameterType="string" />
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
          <OverrideableParameter ID="CSV" Selector="$Config/CSV$" ParameterType="string" />
        </OverrideableParameters>
        <MonitorImplementation>
          <MemberModules>
            <DataSource ID="DS" TypeID="Network.File.Share.WatcherNode.Accessible.Monitor.DataSource">
              <IntervalSeconds>$Config/IntervalSeconds$</IntervalSeconds>
              <SyncTime>$Config/SyncTime$</SyncTime>
              <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
              <CSV>$Config/CSV$</CSV>
            </DataSource>
            <ConditionDetection ID="GoodConditionFilter" TypeID="System!System.ExpressionFilter">
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">Property[@Name='Result']</XPathQuery>
                  </ValueExpression>
                  <Operator>Equal</Operator>
                  <ValueExpression>
                    <Value Type="String">ConfigFileFound</Value>
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
            </ConditionDetection>
            <ConditionDetection ID="BadConditionFilter" TypeID="System!System.ExpressionFilter">
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">Property[@Name='Result']</XPathQuery>
                  </ValueExpression>
                  <Operator>Equal</Operator>
                  <ValueExpression>
                    <Value Type="String">ConfigFileNotFound</Value>
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
            </ConditionDetection>
          </MemberModules>
          <RegularDetections>
            <RegularDetection MonitorTypeStateID="ConfigFileFound">
              <Node ID="GoodConditionFilter">
                <Node ID="DS" />
              </Node>
            </RegularDetection>
            <RegularDetection MonitorTypeStateID="ConfigFileNotFound">
              <Node ID="BadConditionFilter">
                <Node ID="DS" />
              </Node>
            </RegularDetection>
          </RegularDetections>
          <OnDemandDetections>
            <OnDemandDetection MonitorTypeStateID="ConfigFileFound">
              <Node ID="GoodConditionFilter">
                <Node ID="DS" />
              </Node>
            </OnDemandDetection>
            <OnDemandDetection MonitorTypeStateID="ConfigFileNotFound">
              <Node ID="BadConditionFilter">
                <Node ID="DS" />
              </Node>
            </OnDemandDetection>
          </OnDemandDetections>
        </MonitorImplementation>
      </UnitMonitorType>
    </MonitorTypes>
  </TypeDefinitions><Monitoring>
    <Monitors>
      <UnitMonitor ID="Network.File.Share.WatcherNode.Accessible.Monitor" Accessibility="Public" Enabled="true" Target="Network.File.Share.WatcherNode" ParentMonitorID="Health!System.Health.AvailabilityState" Remotable="false" Priority="Normal" TypeID="Network.File.Share.WatcherNode.Accessible.Monitor.MonitorType" ConfirmDelivery="true">
        <Category>AvailabilityHealth</Category>
        <AlertSettings AlertMessage="Network.File.Share.WatcherNode.Accessible.Monitor.AlertMessage">
          <AlertOnState>Warning</AlertOnState>
          <!-- Warning or Error should match OperationalStates below  -->
          <AutoResolve>true</AutoResolve>
          <AlertPriority>Normal</AlertPriority>
          <AlertSeverity>MatchMonitorHealth</AlertSeverity>
          <!-- Common options for AlertSeverity are MatchMonitorHealth, Information, Warning, Error -->
        </AlertSettings>
        <OperationalStates>
          <OperationalState ID="ConfigFileFound" MonitorTypeStateID="ConfigFileFound" HealthState="Success" />
          <OperationalState ID="ConfigFileNotFound" MonitorTypeStateID="ConfigFileNotFound" HealthState="Warning" />
          <!-- HealthState = Warning or Error -->
        </OperationalStates>
        <Configuration>
          <IntervalSeconds>3600</IntervalSeconds>
          <SyncTime></SyncTime>
          <TimeoutSeconds>120</TimeoutSeconds>
          <CSV>$Target/Property[Type='Network.File.Share.WatcherNode']/CSV$</CSV>
        </Configuration>
      </UnitMonitor>
    </Monitors>
  </Monitoring><Presentation>
    <StringResources>
      <StringResource ID="Network.File.Share.WatcherNode.Accessible.Monitor.AlertMessage" />
    </StringResources>
  </Presentation><LanguagePacks>
    <LanguagePack ID="ENU" IsDefault="true">
      <DisplayStrings>
        <DisplayString ElementID="Network.File.Share.WatcherNode.Accessible.Monitor">
          <Name>Network File Share Watcher Node Configuration File Is Accessible Monitor</Name>
          <Description>Verifies that the configuration file for the Watcher node is accessible.</Description>
        </DisplayString>
        <DisplayString ElementID="Network.File.Share.WatcherNode.Accessible.Monitor" SubElementID="ConfigFileFound">
          <Name>Configuration file Accessible</Name>
        </DisplayString>
        <DisplayString ElementID="Network.File.Share.WatcherNode.Accessible.Monitor" SubElementID="ConfigFileNotFound">
          <Name>Configuration file not accessible</Name>
        </DisplayString>
        <DisplayString ElementID="Network.File.Share.WatcherNode.Accessible.Monitor.AlertMessage">
          <Name>Network File Share Watcher Node Config File is accessible: Failure</Name>
          <Description>Configuration file not accessible for Network File Share Watcher Node.</Description>
        </DisplayString>
      </DisplayStrings>
    </LanguagePack>
  </LanguagePacks></ManagementPackFragment>
