<ManagementPackFragment SchemaVersion="2.0" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <TypeDefinitions>

      <ModuleTypes>
        <DataSourceModuleType ID="Network.File.Share.FileCount.DataSource" Accessibility="Public" Batching="false" RunAs="Network.File.Share.RunasProfile">
          <Configuration>
            <xsd:element minOccurs="1" name="IntervalSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
            <xsd:element minOccurs="0" name="SyncTime" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
            <xsd:element minOccurs="0" name="TimeoutSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
            <xsd:element minOccurs="1" name="Share" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
            <xsd:element minOccurs="1" name="Extension" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
            <xsd:element minOccurs="1" name="ErrorCount" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
            <xsd:element minOccurs="1" name="Age" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
            <xsd:element minOccurs="1" name="Recurse" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
            <xsd:element minOccurs="1" name="ErrorSizeMB" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
            <xsd:element minOccurs="1" name="LoggingLevel" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          </Configuration>
          <OverrideableParameters>
            <OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" />
            <OverrideableParameter ID="SyncTime" Selector="$Config/SyncTime$" ParameterType="string" />
            <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="string" />
            <OverrideableParameter ID="LoggingLevel" Selector="$Config/LoggingLevel$" ParameterType="int" />
          </OverrideableParameters>
          <ModuleImplementation Isolation="Any">
            <Composite>
              <MemberModules>
                <DataSource ID="Schedule" TypeID="System!System.SimpleScheduler">
                  <IntervalSeconds>$Config/IntervalSeconds$</IntervalSeconds>
                  <SyncTime>$Config/SyncTime$</SyncTime>
                </DataSource>
                <ProbeAction ID="Probe" TypeID="Network.File.Share.FileCount.DataSource.PSScript" />
              </MemberModules>
              <Composition>
                <Node ID="Probe">
                  <Node ID="Schedule" />
                </Node>
              </Composition>
            </Composite>
          </ModuleImplementation>
          <OutputType>System!System.PropertyBagData</OutputType>
        </DataSourceModuleType>
        <ProbeActionModuleType ID="Network.File.Share.FileCount.DataSource.PSScript" Accessibility="Public" Batching="false" PassThrough="false" RunAs="Network.File.Share.RunasProfile">
          <Configuration>
            <xsd:element minOccurs="0" name="Share" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
            <xsd:element minOccurs="0" name="Extension" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
            <xsd:element minOccurs="0" name="ErrorCount" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
            <xsd:element minOccurs="0" name="Age" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
            <xsd:element minOccurs="0" name="Recurse" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
            <xsd:element minOccurs="0" name="ErrorSizeMB" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
            <xsd:element minOccurs="0" name="LoggingLevel" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          </Configuration>
          <ModuleImplementation Isolation="Any">
            <Composite>
              <MemberModules>
                <ProbeAction ID="PSScript" TypeID="Windows!Microsoft.Windows.PowerShellPropertyBagTriggerOnlyProbe">
                  <ScriptName>GetFileCount.ps1</ScriptName>
                  <ScriptBody>
                    # Parameters
                    # ================================================================================
                    param([string]$Share, [string]$Extension, [int]$ErrorCount, [int]$Age, [int]$Recurse, [int]$ErrorSizeMB, [int]$LoggingLevel)

                    $ScriptName = "GetFileCount.ps1"
                    $EventID = "3521"

                    # LoggingLevel
                    # ================================================================================
                    # 0 = None
                    # 1 = Errors/Warnings
                    # 2 = Verbose
                    # ================================================================================

                    # Starting Script section - All scripts get this
                    #=================================================================================
                    # Gather the start time of the script
                    $StartTime = Get-Date
                    #Set variable to be used in logging events
                    $whoami = whoami
                    # Load MOMScript API
                    $momapi = New-Object -comObject MOM.ScriptAPI
                    # Load PropertyBag function
                    $bag = $momapi.CreatePropertyBag()
                    #Log script event that we are starting task
                    If($LoggingLevel -ge 2)
                    {
                    $momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script is starting. `n Running as ($whoami).")
                    }
                    #=================================================================================

                    #Declare variables containing extension to check and file age

                    if($Extension.length -gt 0)
                    {
                    [string]$sExtension = "*"+$Extension
                    }
                    else
                    {
                    [string]$sExtension = "*"
                    }

                    [int]$iAge = -$Age
                    [string]$sShare = $Share
                    [int]$iErrorCount = $ErrorCount
                    [int]$iRecurse = $Recurse
                    [int]$iErrorSizeMB = $ErrorSizeMB

                    # Test to see if Share is Accessible
                    If(Test-Path -path "$sShare" -pathType Container -ErrorAction SilentlyContinue)
                    {
                    # Count all files with the specific extension and older then the given time
                    if ($iRecurse -eq 1)
                    {
                    # Get files WITH recursion
                    $allFiles = Get-ChildItem -Recurse -Path "$sShare\$sExtension" -ErrorAction SilentlyContinue| Where-Object{$_.LastWriteTime -le (Get-Date).AddMinutes($iAge)}
                    }
                    else {
                    $allFiles = Get-ChildItem -Path "$sShare\$sExtension" -ErrorAction SilentlyContinue | Where-Object{$_.LastWriteTime -le (Get-Date).AddMinutes($iAge)}
                    }

                    # Set output values
                    $fileCount = $allFiles.Count
                    $fileSize = ($allFiles | Measure-Object -Sum Length).Sum / 1MB
                    $fileSize = [Math]::Round($fileSize, 2)

                    if (($iErrorCount -gt 0) -and ($fileCount -le $iErrorCount))
                    {
                    $strStatus = 1
                    $strMessage="Number of Files ($fileCount) with extension $sExtension in $sShare is under threshold $iErrorCount."
                    
                    If($LoggingLevel -ge 2) {
                    $momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Found $fileCount file(s) totaling $fileSize MB with extension $sExtension in $sShare. `n Under threshold $iErrorCount for number of files found.")
                    }
                    }
                    elseif (($iErrorSizeMB -gt 0) -and ($fileSize -le $iErrorSizeMB))
                    {
                    $strStatus = 1
                    $strMessage="Aggregate size of Files ($fileSize) with extension $sExtension in $sShare is under threshold $iErrorSizeMB."
                    
                    If($LoggingLevel -ge 2) {
                    $momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Found $fileCount file(s) totaling $fileSize MB with extension $sExtension in $sShare. `n Under threshold $iErrorSizeMB for aggregate size of files found.")
                    }                    
                    }
                    else
                    {
                    $strStatus = 0
                    $strMessage="Number of Files ($fileCount) or aggregate file size ($fileSize MB) in $sShare with extension $sExtension exceeds file count threshold $iErrorCount or file size threshold $iErrorSizeMB."
                    
                    If($LoggingLevel -ge 1){
                    $momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Found $fileCount file(s) totaling $fileSize MB with extension $sExtension in $sShare.`n Exceeds threshold $iErrorCount for number of files found or $iErrorSizeMB MB threshold for aggregate size.")
                    }
                    }

                    # Return property bag values
                    #=================================================================================
                    #add the values to the bag
                    $bag.AddValue('Message', $strMessage)
                    $bag.AddValue('Status', $strStatus)
                    $bag.AddValue('Files',$fileCount)
                    $bag.AddValue('SizeMB',$fileSize)
                    $bag


                    } else {
                    # Unable to access File Share
                    $strMessage="Unable to access $sShare as $whoami"

                    If($LoggingLevel -ge 1) {
                    $momapi.LogScriptEvent($ScriptName,$EventID,2,"`n Unable to access $sShare as $whoami.")
                    }
                    }

                    # End of script section
                    #=================================================================================
                    #Log an event for script ending and total execution time.
                    $EndTime = Get-Date
                    $ScriptTime = ($EndTime - $StartTime).TotalSeconds
                    If($LoggingLevel -ge 2) {
                      $momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script Completed. `n Script Runtime: ($ScriptTime) seconds.")
                    }
                    #=================================================================================

                  </ScriptBody>
                  <Parameters>
                    <Parameter>
                      <Name>Share</Name>
                      <Value>$Config/Share$</Value>
                    </Parameter>
                    <Parameter>
                      <Name>Extension</Name>
                      <Value>$Config/Extension$</Value>
                    </Parameter>
                    <Parameter>
                      <Name>ErrorCount</Name>
                      <Value>$Config/ErrorCount$</Value>
                    </Parameter>
                    <Parameter>
                      <Name>Age</Name>
                      <Value>$Config/Age$</Value>
                    </Parameter>
                    <Parameter>
                      <Name>Recurse</Name>
                      <Value>$Config/Recurse$</Value>
                    </Parameter>
                    <Parameter>
                      <Name>ErrorSizeMB</Name>
                      <Value>$Config/ErrorSizeMB$</Value>
                    </Parameter>
                    <Parameter>
                      <Name>LoggingLevel</Name>
                      <Value>$Config/LoggingLevel$</Value>
                    </Parameter>
                  </Parameters>
                  <TimeoutSeconds>300</TimeoutSeconds>
                </ProbeAction>
              </MemberModules>
              <Composition>
                <Node ID="PSScript" />
              </Composition>
            </Composite>
          </ModuleImplementation>
          <OutputType>System!System.PropertyBagData</OutputType>
          <TriggerOnly>true</TriggerOnly>
        </ProbeActionModuleType>
    </ModuleTypes>
    <MonitorTypes>
      <UnitMonitorType ID="Network.File.Share.Status.MonitorType" Accessibility="Public">
        <MonitorTypeStates>
          <MonitorTypeState ID="FileCountStatusOK" NoDetection="false" />
          <MonitorTypeState ID="FileCountStatusNotOK" NoDetection="false" />
        </MonitorTypeStates>
        <Configuration>
          <xsd:element name="IntervalSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="SyncTime" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="TimeoutSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="Share" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="Extension" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="ErrorCount" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="Age" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="Recurse" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="ErrorSizeMB" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="LoggingLevel" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" />
          <OverrideableParameter ID="SyncTime" Selector="$Config/SyncTime$" ParameterType="string" />
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
          <OverrideableParameter ID="LoggingLevel" Selector="$Config/LoggingLevel$" ParameterType="int" />
        </OverrideableParameters>
        <MonitorImplementation>
          <MemberModules>
            <DataSource ID="DS" TypeID="Network.File.Share.FileCount.DataSource">
              <IntervalSeconds>$Config/IntervalSeconds$</IntervalSeconds>
              <SyncTime>$Config/SyncTime$</SyncTime>
              <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
              <Share>$Config/Share$</Share>
              <Extension>$Config/Extension$</Extension>
              <ErrorCount>$Config/ErrorCount$</ErrorCount>
              <Age>$Config/Age$</Age>
              <Recurse>$Config/Recurse$</Recurse>
              <ErrorSizeMB>$Config/ErrorSizeMB$</ErrorSizeMB>
              <LoggingLevel>$Config/LoggingLevel$</LoggingLevel>
            </DataSource>
            <ConditionDetection ID="FilterFileCountStatusOK" TypeID="System!System.ExpressionFilter">
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="Integer">Property[@Name='Status']</XPathQuery>
                  </ValueExpression>
                  <Operator>Equal</Operator>
                  <ValueExpression>
                    <Value Type="Integer">1</Value>
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
            </ConditionDetection>
            <ConditionDetection ID="FilterFileCountStatusNotOK" TypeID="System!System.ExpressionFilter">
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="Integer">Property[@Name='Status']</XPathQuery>
                  </ValueExpression>
                  <Operator>Equal</Operator>
                  <ValueExpression>
                    <Value Type="Integer">0</Value>
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
            </ConditionDetection>
          </MemberModules>
          <RegularDetections>
            <RegularDetection MonitorTypeStateID="FileCountStatusOK">
              <Node ID="FilterFileCountStatusOK">
                <Node ID="DS" />
              </Node>
            </RegularDetection>
            <RegularDetection MonitorTypeStateID="FileCountStatusNotOK">
              <Node ID="FilterFileCountStatusNotOK">
                <Node ID="DS" />
              </Node>
            </RegularDetection>
          </RegularDetections>
          <OnDemandDetections>
            <OnDemandDetection MonitorTypeStateID="FileCountStatusOK">
              <Node ID="FilterFileCountStatusOK">
                <Node ID="DS" />
              </Node>
            </OnDemandDetection>
            <OnDemandDetection MonitorTypeStateID="FileCountStatusNotOK">
              <Node ID="FilterFileCountStatusNotOK">
                <Node ID="DS" />
              </Node>
            </OnDemandDetection>
          </OnDemandDetections>
        </MonitorImplementation>
      </UnitMonitorType>
    </MonitorTypes>
  </TypeDefinitions>
  <Monitoring>
    <Monitors>
      <UnitMonitor ID="Network.File.Share.FileCount.Monitor" Accessibility="Public" Enabled="true" Target="Network.File.Share.Share" ParentMonitorID="Health!System.Health.PerformanceState" Remotable="false" Priority="Normal" RunAs="Network.File.Share.RunasProfile" TypeID="Network.File.Share.Status.MonitorType" ConfirmDelivery="false">
        <Category>PerformanceHealth</Category>
        <AlertSettings AlertMessage="Network.File.Share.File.Count.Monitor.AlertMessage">
          <AlertOnState>Error</AlertOnState>
          <AutoResolve>true</AutoResolve>
          <AlertPriority>Normal</AlertPriority>
          <AlertSeverity>MatchMonitorHealth</AlertSeverity>
          <AlertParameters>
            <AlertParameter1>$Target/Property[Type='Network.File.Share.Share']/Share$</AlertParameter1>
            <AlertParameter2>$Data/Context/Property[@Name='Files']$</AlertParameter2>
            <AlertParameter3>$Target/Property[Type='Network.File.Share.Share']/Extension$</AlertParameter3>
            <AlertParameter4>$Data/Context/Property[@Name='SizeMB']$</AlertParameter4>
          </AlertParameters>
        </AlertSettings>
        <OperationalStates>
          <OperationalState ID="FileCountStatusOK" MonitorTypeStateID="FileCountStatusOK" HealthState="Success" />
          <OperationalState ID="FileCountStatusNotOK" MonitorTypeStateID="FileCountStatusNotOK" HealthState="Error" />
        </OperationalStates>
        <Configuration>
          <IntervalSeconds>900</IntervalSeconds>
          <SyncTime></SyncTime>
          <TimeoutSeconds>300</TimeoutSeconds>
          <Share>$Target/Property[Type='Network.File.Share.Share']/Share$</Share>
          <Extension>$Target/Property[Type='Network.File.Share.Share']/Extension$</Extension>
          <ErrorCount>$Target/Property[Type='Network.File.Share.Share']/ErrorCount$</ErrorCount>
          <Age>$Target/Property[Type='Network.File.Share.Share']/Age$</Age>
          <Recurse>$Target/Property[Type='Network.File.Share.Share']/Recurse$</Recurse>
          <ErrorSizeMB>$Target/Property[Type='Network.File.Share.Share']/ErrorSizeMB$</ErrorSizeMB>
          <LoggingLevel>$Target/Host/Property[Type='Network.File.Share.WatcherNode']/LoggingLevel$</LoggingLevel>
        </Configuration>
      </UnitMonitor>
    </Monitors>    
  </Monitoring>
  <LanguagePacks>
    <LanguagePack ID="ENU" IsDefault="true">
      <DisplayStrings>
        <DisplayString ElementID="Network.File.Share.Status.MonitorType">
          <Name>Network File Share File Count Status Monitor Type</Name>
          <Description>Network File Share File Count Status Monitor Type</Description>
        </DisplayString>
        <DisplayString ElementID="Network.File.Share.Status.MonitorType" SubElementID="IntervalSeconds">
          <Name>IntervalSeconds</Name>
          <Description>IntervalSeconds</Description>
        </DisplayString>
        <DisplayString ElementID="Network.File.Share.Status.MonitorType" SubElementID="SyncTime">
          <Name>SyncTime</Name>
          <Description>SyncTime</Description>
        </DisplayString>
        <DisplayString ElementID="Network.File.Share.Status.MonitorType" SubElementID="TimeoutSeconds">
          <Name>Timeout Seconds</Name>
          <Description>Timeout Seconds</Description>
        </DisplayString>
        <DisplayString ElementID="Network.File.Share.Status.MonitorType" SubElementID="LoggingLevel">
          <Name>LoggingLevel</Name>
          <Description>LoggingLevel (0=None, 1=Error, 2=Verbose)</Description>
        </DisplayString>
        <DisplayString ElementID="Network.File.Share.FileCount.DataSource">
          <Name>Network File Share File Count Data Source</Name>
          <Description>Script to enumerate UNC paths and count files.</Description>
        </DisplayString>
        <DisplayString ElementID="Network.File.Share.FileCount.DataSource" SubElementID="IntervalSeconds">
          <Name>Interval Seconds</Name>
          <Description>Interval (seconds)</Description>
        </DisplayString>
        <DisplayString ElementID="Network.File.Share.FileCount.DataSource" SubElementID="SyncTime">
          <Name>SyncTime</Name>
          <Description>Sync Time</Description>
        </DisplayString>
        <DisplayString ElementID="Network.File.Share.FileCount.DataSource" SubElementID="TimeoutSeconds">
          <Name>Timeout Seconds</Name>
          <Description>Timeout Seconds</Description>
        </DisplayString>
        <DisplayString ElementID="Network.File.Share.FileCount.DataSource" SubElementID="LoggingLevel">
          <Name>LoggingLevel</Name>
          <Description>LoggingLevel (0=None, 1=Error, 2=Verbose)</Description>
        </DisplayString>
      </DisplayStrings>
      <KnowledgeArticles>

        <KnowledgeArticle ElementID="Network.File.Share.Status.MonitorType" Visible="true">
          <MamlContent>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Summary</maml:title>
              <maml:para>This monitor checks a UNC (shared folder) for a count of files.  The monitor can test for specific file extensions and can be recursive or non-recursive.  If the file count exceeds the threshold defined in the parameter file, then an error occurs.</maml:para>
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Causes</maml:title>
              <maml:para>This script will fail if the UNC path is not accessible or if the count of files in the UNC share matching the specified criteria exceeds the threshold value.</maml:para>
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Resolutions</maml:title>
              <maml:para>If this monitor fails, check to be sure that the UNC path still exists and that the RunAs account is defined and has permissions to the share.  Also check to see that the count of files matching the conditions defined does not exceed the threshold value.</maml:para>
            </maml:section>
          </MamlContent>
        </KnowledgeArticle>
      </KnowledgeArticles>
    </LanguagePack>
  </LanguagePacks>
</ManagementPackFragment>
