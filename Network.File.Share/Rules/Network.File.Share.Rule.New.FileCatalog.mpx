<ManagementPackFragment SchemaVersion="2.0" xmlns:xsd="http://www.w3.org/2001/XMLSchema"><TypeDefinitions>
    <ModuleTypes>
      <DataSourceModuleType ID="Network.File.Share.Rule.New.FileCatalog.TimedPowerShell.Rule.DS" Accessibility="Public" Batching="false" RunAs="Network.File.Share.RunasProfile">
        <Configuration>
          <IncludeSchemaTypes>
            <SchemaType>System!System.ExpressionEvaluatorSchema</SchemaType>
          </IncludeSchemaTypes>
          <xsd:element name="IntervalSeconds" type="xsd:int" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="SyncTime" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" />
          <OverrideableParameter ID="SyncTime" Selector="$Config/SyncTime$" ParameterType="string" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <DataSource ID="DS" TypeID="System!System.Scheduler">
                <Scheduler>
                  <SimpleReccuringSchedule>
                    <Interval Unit="Seconds">$Config/IntervalSeconds$</Interval>
                    <SyncTime>$Config/SyncTime$</SyncTime>
                  </SimpleReccuringSchedule>
                  <ExcludeDates />
                </Scheduler>
              </DataSource>
            </MemberModules>
            <Composition>
              <Node ID="DS" />
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.TriggerData</OutputType>
      </DataSourceModuleType>
      <WriteActionModuleType ID="Network.File.Share.Rule.New.FileCatalog.TimedPowerShell.Rule.WA" Accessibility="Internal" Batching="false">
        <Configuration>
          <xsd:element minOccurs="1" name="FileShareId" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" name="FileShare" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" name="FileCatalog" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" name="CatalogVersion" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" name="TimeoutSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="FileShareId" Selector="$Config/FileShareId$" ParameterType="int" />
          <OverrideableParameter ID="FileShare" Selector="$Config/FileShare$" ParameterType="string" />
          <OverrideableParameter ID="FileCatalog" Selector="$Config/FileCatalog$" ParameterType="string" />
          <OverrideableParameter ID="CatalogVersion" Selector="$Config/CatalogVersion$" ParameterType="string" />
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <WriteAction ID="WA" TypeID="Windows!Microsoft.Windows.PowerShellWriteAction">
                <ScriptName>Network.File.Share.Rule.New.FileCatalog.TimedPowerShell.Rule.WA.ps1</ScriptName>
                <ScriptBody>
                  #=================================================================================
                  #  Describe Script Here
                  #
                  #  Author:
                  #  v1.0
                  #=================================================================================
                  param($FileShareId, $FileShare, $FileCatalog, $CatalogVersion)


                  # Manual Testing section - put stuff here for manually testing script - typically parameters:
                  #=================================================================================
                  # $ComputerName = "computername.domain.com"
                  # $MGName = "foo"
                  # $Param1 = "bar"
                  #=================================================================================

                  $SourceId = $MPElement$
                  $ManagedEntityId = $Target/Id$


                  # Constants section - modify stuff here:
                  #=================================================================================
                  # Assign script name variable for use in event logging.
                  # ScriptName should be the same as the ID of the module that the script is contained in
                  $ScriptName = "Network.File.Share.Rule.New.FileCatalog.TimedPowerShell.Rule.WA.ps1"
                  $EventID = "3526"
                  #=================================================================================


                  # Starting Script section - All scripts get this
                  #=================================================================================
                  # Gather the start time of the script
                  $StartTime = Get-Date
                  #Set variable to be used in logging events
                  $whoami = whoami
                  # Load MOMScript API
                  $momapi = New-Object -comObject MOM.ScriptAPI


                  #Log script event that we are starting task
                  $momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script is starting. `n Running as ($whoami).")
                  #=================================================================================


                  # Begin MAIN script section
                  #=================================================================================
                  # Log an event for the Params
                  $momapi.LogScriptEvent($ScriptName,$EventID,0,"`n These are the parameters passed from script: `n FileShare: ($FileShare). `n FileCatalog: ($FileCatalog). `n CatalogVersion: ($CatalogVersion).")

                  $fileName = (new-guid).ToString()
                  $fileCatalogPath = Join-Path -Path $FileCatalog -ChildPath "$fileName.cat"

                  # Test value of $CatalogVerion
                  ==================================================================================
                  If($CatalogVersion -ne "2.0" -and $CatalogVersion -ne "1.0"){
                  $CatalogVersion = "2.0"
                  }

                  $Result = New-FileCatalog -Path $FileShare -CatalogFilePath $fileCatalogPath -CatalogVersion $CatalogVersion
                  If($Result){


                  $discoveryData = $momapi.CreateDiscoveryData(0, $SourceId, $ManagedEntityId)
                  $instance = $discoveryData.CreateClassInstance("$MPElement[Name='Network.File.Share.Share']$")
                  $instance.AddProperty("$MPElement[Name='Network.File.Share.Share']/ID$", $share.ID)
                  $instance.AddProperty("$MPElement[Name='Network.File.Share.Share']/CatalogVersion$", $CatalogVersion)
                  $instance.AddProperty("$MPElement[Name='Network.File.Share.Share']/CatalogLastCalculated$", (Get-Date).ToUniversalTime())
                  $instance.AddProperty("$MPElement[Name='Network.File.Share.Share']/CatalogName$", $fileCatalogPath)

                  $discoveryData.AddInstance($instance)
                  $discoveryData

                  # Write-Host "PowerShell script executed"
                  # Write-Host "FileShare: " $FileShare
                  # Write-Host "FileCatalog: " $fileCatalogPath
                  # Write-Host "CatalogVersion: " $CatalogVersion
                  }
                  Else
                  {
                  # Write-Host "PowerShell script failed"
                  # Write-Host "Check the file share $fileShare and the folder $FileCatalog. `n Verify that the RunAs account has permissions to both."

                  $momapi.LogScriptEvent($ScriptName,$EventID,2,"`n Failed to compute new File Catalog.")
                  }

                  #=================================================================================
                  # End MAIN script section


                  # End of script section
                  #=================================================================================
                  #Log an event for script ending and total execution time.
                  $EndTime = Get-Date
                  $ScriptTime = ($EndTime - $StartTime).TotalSeconds
                  $momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script Completed. `n Script Runtime: ($ScriptTime) seconds.")
                  #=================================================================================
                  # End of script
                </ScriptBody>
                <Parameters>
                  <Parameter>
                    <Name>FileShareId</Name>
                    <Value>$Config/FileShareId$</Value>
                  </Parameter>
                  <Parameter>
                    <Name>FileShare</Name>
                    <Value>$Config/FileShare$</Value>
                  </Parameter>
                  <Parameter>
                    <Name>FileCatalog</Name>
                    <Value>$Config/FileCatalog$</Value>
                  </Parameter>
                  <Parameter>
                    <Name>CatalogVersion</Name>
                    <Value>$Config/CatalogVersion$</Value>
                  </Parameter>
                </Parameters>
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
              </WriteAction>
            </MemberModules>
            <Composition>
              <Node ID="WA" />
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.BaseData</OutputType>
        <InputType>System!System.BaseData</InputType>
      </WriteActionModuleType>
    </ModuleTypes>
  </TypeDefinitions><Monitoring>
    <Rules>
      <Rule ID="Network.File.Share.Rule.New.FileCatalog.TimedPowerShell.Rule" Enabled="false" Target="Network.File.Share.Share" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Custom</Category>
        <DataSources>
          <DataSource ID="Scheduler" TypeID="Network.File.Share.Rule.New.FileCatalog.TimedPowerShell.Rule.DS">
            <IntervalSeconds>86400</IntervalSeconds>
            <SyncTime></SyncTime>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="WA" TypeID="Network.File.Share.Rule.New.FileCatalog.TimedPowerShell.Rule.WA">
            <FileShareId>$Target/Property[Type="Network.File.Share.Share"]/ID$</FileShareId>
            <FileShare>$Target/Property[Type="Network.File.Share.Share"]/Share$</FileShare>
            <FileCatalog>$Target/Host/Property[Type="Network.File.Share.WatcherNode"]/FileCatalog$</FileCatalog>
            <CatalogVersion>$Target/Property[Type="Network.File.Share.Share"]/CatalogVersion$</CatalogVersion>
            <TimeoutSeconds>120</TimeoutSeconds>
          </WriteAction>
        </WriteActions>
      </Rule>
    </Rules>
  </Monitoring><LanguagePacks>
    <LanguagePack ID="ENU" IsDefault="true">
      <DisplayStrings>
        <DisplayString ElementID="Network.File.Share.Rule.New.FileCatalog.TimedPowerShell.Rule">
          <Name>Network File.Share Rule.New.FileCatalog TimedPowerShell Rule</Name>
        </DisplayString>
      </DisplayStrings>
    </LanguagePack>
  </LanguagePacks></ManagementPackFragment>
